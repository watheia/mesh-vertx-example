import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import static org.gradle.api.tasks.testing.logging.TestLogEvent.*

plugins {
  id "java"
  id "application"
  id "com.github.johnrengelman.shadow" version "6.1.0"
}

repositories {
  mavenCentral()
  mavenLocal()
  maven {
    url = uri('https://maven.gentics.com/maven2')
  }
}

ext {
  vertxVersion = "4.0.3"
  junitJupiterVersion = "5.7.0"

  mainVerticleName = "wa.vertx.mesh.web.MainVerticle"
  launcherClassName = "io.vertx.core.Launcher"

  watchForChange = "src/**/*"
  doOnChange = "${projectDir}/gradlew classes"
}

application {
  mainClassName = launcherClassName
}

dependencies {
  implementation("com.gentics.mesh:mesh-rest-client:1.7.6")
  implementation(platform("io.vertx:vertx-stack-depchain:$vertxVersion"))
  implementation("io.vertx:vertx-web-client")
  implementation("io.vertx:vertx-web-validation")
  implementation("io.vertx:vertx-auth-jwt")
  implementation("io.vertx:vertx-service-proxy")
  implementation("io.vertx:vertx-health-check")
  implementation("io.vertx:vertx-web")
  implementation("io.vertx:vertx-service-discovery")
  implementation("io.vertx:vertx-shell")
  implementation("io.vertx:vertx-auth-oauth2")
  implementation("io.vertx:vertx-tcp-eventbus-bridge")
  implementation("io.vertx:vertx-sockjs-service-proxy")
  implementation("io.vertx:vertx-config")
  implementation("io.vertx:vertx-web-templ-handlebars")
  implementation("io.vertx:vertx-web-graphql")
  implementation("io.vertx:vertx-rx-java2")
  implementation("io.vertx:vertx-web-sstore-cookie")
  implementation("io.vertx:vertx-circuit-breaker")
  implementation("io.vertx:vertx-mail-client")
  testImplementation("io.vertx:vertx-junit5")
  testImplementation("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.withType(ShadowJar) {
  archiveClassifier.set("fat")
  manifest {
    attributes "Main-Verticle": mainVerticleName
  }
  mergeServiceFiles()
}

tasks.withType(Test) {
  useJUnitPlatform()
  testLogging {
    events = [PASSED, SKIPPED, FAILED]
  }
}

tasks.withType(JavaExec) {
  args = ["run", mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$launcherClassName", "--on-redeploy=$doOnChange"]
}

defaultTasks 'assemble'
